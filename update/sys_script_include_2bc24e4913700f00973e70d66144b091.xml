<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_slack_points.SlackClient</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>SlackClient</name>
        <script><![CDATA[var SlackClient = Class.create();
SlackClient.prototype = {
    initialize: function() {
		this.endpoint        = 'https://slack.com/api';
		this.token           = gs.getProperty('x_snc_slack_points.slack_bot_token');
		this.default_room    = gs.getProperty('x_snc_slack_points.default_room');
		this.enable_addpoint = gs.getProperty('x_snc_slack_points.enable_addpoint');
    },
	
	getUserInfo: function(userId) {
		var rm = this._newGetRequest('/users.info'); 
		rm.setQueryParameter('user', userId); 
		var response = rm.execute();
		var body = response.getBody(); 
		return JSON.parse(body); 
	},
	
	_newGetRequest: function(resource) {
		var rm = new sn_ws.RESTMessageV2(); 
		rm.setEndpoint(this.endpoint + resource); 
		rm.setHttpMethod('GET'); 
		rm.setQueryParameter('token', this.token); 
		return rm; 
	}, 
	log: function(dataObj){
		var prettyData = JSON.stringify(dataObj, '','    ');
		var grSlackEvent = new GlideRecord('x_snc_slack_points_slack_event');
		grSlackEvent.initialize();
		grSlackEvent.payload = prettyData;
		grSlackEvent.insert();
		gs.eventQueue("x_snc_slack_points.message", grSlackEvent, prettyData, '');
		return grSlackEvent.getLink().split('&')[0];
	},
	addPoint: function(slackObj){
		if(this.enable_addpoint){
			//var findCodeRegex = /((\`\`\`)|(\`))((.*|\s*))(.*)(\s?\@?(\S+)\s?\+\+)((.*|\s*))((\`\`\`)|(\`))/gmi;
			//var messageWithCodeSnippetsRemoved = slackObj.event.text.replace(findCodeRegex,'');
			var messagesArr = [];
			var matches = slackObj.event.text.match(/\s?\@?(\S+)\s?\+\+/g);
			matches.forEach(function (t) {
				var thing = t.replace('++', '');
				thing = thing.trim();

				// Check for self-points
				if (thing.contains(slackObj.event.user)) {
					return;
				}

				var grSlackUser = new GlideRecord('x_snc_slack_points_slack_user');
				grSlackUser.addQuery('user_id', thing);
				grSlackUser.query();

				if (grSlackUser.next()) {
					grSlackUser.points = grSlackUser.points + 1;
					grSlackUser.update();
				} else {
					grSlackUser.initialize();
					grSlackUser.user_id = thing;
					grSlackUser.points = 1;
					grSlackUser.insert();
				}
				var points = grSlackUser.points;
				var messages = [
					'Congrats ' + thing + ' you now have ' + points + ' points',
					'Good work ' + thing + ' you now have ' + points + ' points',
					'Good going ' + thing + ' you now have ' + points + ' points',
					'Way to help out ' + thing + ' you now have ' + points + ' points',
					'Give a hear-hear for ' + thing + ' you now have ' + points + ' points',
					'Who has two thumbs and one more point? ' + thing + ' does.  You now have ' + points + ' points'
				];
				var message = messages[Math.floor(Math.random() * (messages.length - 0 + 1)) + 0];
				messagesArr.push(message);
			});
			this.say(messagesArr.join('\n'));

			// var userId = payloadObject.event.text.match(/\s?\@?(\S+)\s?\+\+/)[1];
		}
	},
	say: function (messageStr){
		if(typeof payloadObject === "undefined"){
			var payloadObject = {event: {channel: this.default_room}};
		}
		var rm = new sn_ws.RESTMessageV2();
		rm.setLogLevel('all');
		rm.setHttpMethod('POST');
		rm.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
		rm.setEndpoint('https://slack.com/api/chat.postMessage');

		var bodyString = '';
		bodyString += 'token=' + gs.urlEncode(this.token);
		bodyString += '&channel=' + gs.urlEncode(payloadObject.event.channel);

		if (payloadObject.event.thread_ts) {
			bodyString += '&thread_ts=' + gs.urlEncode(payloadObject.event.thread_ts);
		}

		bodyString += '&text=' + gs.urlEncode(messageStr);

		rm.setRequestBody(bodyString);
		var response = rm.execute();
		var responseBody = response.getBody();
		var statusCode = response.getStatusCode();
	},
	
	newMethod2: function() {
		
	},

    type: 'SlackClient'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>josh.nerius</sys_created_by>
        <sys_created_on>2017-08-23 21:08:30</sys_created_on>
        <sys_id>2bc24e4913700f00973e70d66144b091</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>SlackClient</sys_name>
        <sys_package display_value="Slack Points Thing" source="x_snc_slack_points">4f6df3c813444f009718b9b76144b02c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Slack Points Thing">4f6df3c813444f009718b9b76144b02c</sys_scope>
        <sys_update_name>sys_script_include_2bc24e4913700f00973e70d66144b091</sys_update_name>
        <sys_updated_by>jace.benson@gmail.com</sys_updated_by>
        <sys_updated_on>2017-10-22 12:01:17</sys_updated_on>
    </sys_script_include>
</record_update>
